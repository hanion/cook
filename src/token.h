#pragma once
#include "da.h"
#include <stddef.h>
#include <stdbool.h>

typedef enum {
	TOKEN_END = 0,
	TOKEN_INVALID,

	TOKEN_IDENTIFIER,
	TOKEN_STRING_LITERAL, TOKEN_INTEGER_LITERAL, TOKEN_FLOAT_LITERAL,

	TOKEN_OPEN_PAREN, TOKEN_CLOSE_PAREN,
	TOKEN_OPEN_CURLY, TOKEN_CLOSE_CURLY,
	TOKEN_OPEN_BRACKET, TOKEN_CLOSE_BRACKET,

	TOKEN_COMMA, TOKEN_DOT,
	TOKEN_SEMICOLON, TOKEN_COLON,
	TOKEN_QUESTION,

	TOKEN_AT, TOKEN_DOLLAR,

	TOKEN_PLUS, TOKEN_MINUS, TOKEN_STAR, TOKEN_SLASH,
	TOKEN_PERCENT, TOKEN_AMPERSAND,
	TOKEN_PIPE, TOKEN_CARET,
	TOKEN_TILDE, TOKEN_EXCLAMATION,

	TOKEN_EQUAL, TOKEN_PLUS_EQUAL, TOKEN_MINUS_EQUAL,
	TOKEN_STAR_EQUAL, TOKEN_SLASH_EQUAL, TOKEN_PERCENT_EQUAL,
	TOKEN_AMPERSAND_EQUAL, TOKEN_PIPE_EQUAL, TOKEN_CARET_EQUAL,

	TOKEN_EQUAL_EQUAL, TOKEN_EXCLAMATION_EQUAL,
	TOKEN_LESS, TOKEN_LESS_EQUAL,
	TOKEN_GREATER, TOKEN_GREATER_EQUAL,

	TOKEN_PLUS_PLUS, TOKEN_MINUS_MINUS,
	TOKEN_SHIFT_LEFT, TOKEN_SHIFT_RIGHT,

	//TOKEN_SHIFT_LEFT_EQUAL, TOKEN_SHIFT_RIGHT_EQUAL,

	TOKEN_AND_AND, TOKEN_OR_OR,

	TOKEN_KEYWORD_IF,
	TOKEN_KEYWORD_ELSE,
	TOKEN_KEYWORD_FOR,
	TOKEN_KEYWORD_WHILE,
	TOKEN_KEYWORD_BREAK,
	TOKEN_KEYWORD_CONTINUE,
	TOKEN_KEYWORD_RETURN,
	TOKEN_KEYWORD_SWITCH,
	TOKEN_KEYWORD_CASE,
	TOKEN_KEYWORD_DEFAULT,
	TOKEN_KEYWORD_TRUE,
	TOKEN_KEYWORD_FALSE
} TokenType;


typedef struct {
	TokenType type;
	StringView str;
	size_t line;
	size_t column;
} Token;


const char* token_name_cstr(Token token);
const char* token_type_name_cstr(TokenType tt);
TokenType token_lookup_keyword(const Token token);

bool token_is_integer     (char c);
bool token_is_symbol_start(char c);
bool token_is_symbol      (char c);

bool token_equals(Token token, const char* cstr);

void token_print(Token t, int indent);
